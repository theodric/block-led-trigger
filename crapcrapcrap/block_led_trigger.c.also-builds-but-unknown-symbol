// SPDX-License-Identifier: GPL-2.0
#include <linux/module.h>
#include <linux/kernel.h>
#include <linux/init.h>
#include <linux/leds.h>
#include <linux/blkdev.h>
#include <linux/tracepoint.h>
#include <linux/delay.h>
#include <trace/events/block.h>

static bool invert_brightness;
module_param(invert_brightness, bool, 0444);
MODULE_PARM_DESC(invert_brightness, "Invert LED brightness");

static unsigned long blink_delay_ms = 10;
module_param(blink_delay_ms, ulong, 0644);
MODULE_PARM_DESC(blink_delay_ms, "Duration of LED blink in milliseconds");

static char *devices[8];
static int device_count;
module_param_array(devices, charp, &device_count, 0444);
MODULE_PARM_DESC(devices, "Block devices to monitor (e.g., sda,sdb)");

#define MAX_DEVICES 8

DEFINE_LED_TRIGGER(ledtrig_block);

static void block_rq_issue_probe(void *ignore, struct request *rq)
{
	int i;
	struct gendisk *disk = rq->q->disk;

	if (!disk)
		return;

	for (i = 0; i < device_count; i++) {
		if (strcmp(disk->disk_name, devices[i]) == 0) {
			// Use simple LED trigger event instead of blink_oneshot
			led_trigger_event(ledtrig_block, 
				invert_brightness ? LED_OFF : LED_FULL);
			msleep(blink_delay_ms);
			led_trigger_event(ledtrig_block, 
				invert_brightness ? LED_FULL : LED_OFF);
			break;
		}
	}
}

static int __init block_led_trigger_init(void)
{
	int ret;

	pr_info("block_led_trigger: loading\n");

	// Register the LED trigger
	led_trigger_register_simple("block-activity", &ledtrig_block);

	// Try to use the standard tracepoint registration
	ret = register_trace_block_rq_issue(block_rq_issue_probe, NULL);
	if (ret) {
		pr_err("block_led_trigger: failed to register tracepoint\n");
		led_trigger_unregister_simple(ledtrig_block);
		return ret;
	}

	pr_info("block_led_trigger loaded\n");
	return 0;
}

static void __exit block_led_trigger_exit(void)
{
	unregister_trace_block_rq_issue(block_rq_issue_probe, NULL);
	led_trigger_unregister_simple(ledtrig_block);
	pr_info("block_led_trigger: unloaded\n");
}

module_init(block_led_trigger_init);
module_exit(block_led_trigger_exit);

MODULE_AUTHOR("your_mom");
MODULE_DESCRIPTION("LED trigger for block IO via block_rq_issue tracepoint");
MODULE_LICENSE("GPL");
